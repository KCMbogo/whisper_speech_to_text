Okay, we've already installed the drivers, so now we can head to code. I know we don't like the theory part, we don't like the theory things. Most people like to see code in action. So I opened up the JustViewCode, you can open any IDE or use, but I prefer just to your code. Then we can start. So I just created a simple file called lenselanium.py, it's in the folder called lenselanium. Now here, I can start by creating a patch environment. So if you're new to Python programming, a patch environment is simply just a folder that contains packages for the specific project. All the dependencies that you're going to install for the specific projects are going inside that virtual environment, separate from the system-wide packages. This helps for some cases that you want to install packages that only work for a set in Python version. So it will help to separate the environment. That's what it's called a virtual environment. The packages for the project from the system-wide packages. So just for a set, an environment to install those packages, only for that project that won't affect the global packages. The command to create a virtual environment is Python. Then the command is Python. That's M. Then this here, this is the command. The word them is the name of the patch environment or the folder that I want to create. For Windows user, this is for Linux user. For Windows user, you can just write Py.M. Then the name of your patch environment. You can put them in them, but I prefer the word them because them by itself it means the patch environment. So it's easy for anybody to know. And that makes it stay at the top of the folder structure always. So it won't get mixed in between another folder as all files if it happens we have a lot of folder or if our folder structure is complicated. So it won't stay at the top. I hit Enter. And here you see this folder here.vend and inside lib, we only have two folders. Pipe. Pipe. Now any packet that install is coming inside this two folders here, lib and lib64. So first let's activate a patch environment. Activating a patch environment simply is just telling you a terminal or for Windows users command from that I want to go inside my patch environment so that I can start adding files or dependencies or packages inside that. That is what activating a patch environment is. For Linux users again, they were erotic here. Source.vend being activated. But for Windows users it's different. It will be something like. .4-batslash.vend.vend. Scripts. Activate. This is if you're using a command prompt. This we run if you're using command prompt in your VS code. So you just have to come in. I think there's some settings here. For Windows users there's some selections here you can choose either PowerShell or Command Prompt or whatever. Just choose Command Prompt and run this. If you run this on a PowerShell it won't work. So for Windows users you write this on Command Prompt. But for Python users if I mean for Linux users it's this simple. So if you activate a patch environment you see it creates the name of the patch environment before your path was structured. There it is. Now, install. We use people the Python dependency manager if I'm correct. If the themes are used are right. But simply just the I can say a command that you use to install more packages to your patch environment. So I can say if you install Selenium. Selenium is the package you want. So it's installing. It's not much it's only about 9mb so don't you see all these files like a b, a b, a b, a b. Yeah, it's only 9mb. I think it used the cached. Yeah, I installed it here to this. So it used the cached installation to add up. As you can see on our folder structure more folders have increased here. Yeah, we have more folders here side packages. You can see this. It's the Selenium you see. So we have Selenium already installed. Yes, Selenium. And that's it. So you're working on the Selenium. I can create a terminal now. And you can write some code. Now Selenium helps you interact with almost any browser, any browser agent, Chrome, Safari, Edge, Firefox, any browser that is available out there. So for starters, we can import from Selenium, import WebPrivate.

Yeah, I was trying to show you where this Webriver comes from, but I think the structure is a bit complicated. Also from Selenium, import Webriver. Now this Webriver is a module that contains many, many of the different browsers. As I think as you might have seen here Webriver inside this Webriver folder, it's a module in Python. We have Chrome. We have Chromium. All these are the different browsers. Chrome, Chromium. We have Edge, Firefox. We have Safari. So these are the drivers that are supported right now. And I think they are the major browsers that are supported right now and they are the major browsers out there. If there is any other browser that is not here, it's not among the major browsers. So it's only support these major browsers like Safari, Firefox, Edge, Chromium and Chrome. So for a case since we are using Chrome, we can say driver, yes creative variable, that will store the instantiation of your Chrome engine. So from Webriver, as we have seen, we are going to call Chrome. As our browser, so if you are using Safari, use ads Safari and if you are using Edge, so it will be Edge. If you are using Firefox, it will be Firefox. If you are using Chromium, it will be Chromium Edge like that. So that's why it's Chrome. So it's Chrome. So we are using Chrome. Now if I run this, we expect to see the browser opens up. It opens then it's shadow. Now why is that? So simply because here the code runs, opens the browser. After opening the browser, there is nothing to do. So it just shuts off. So it's happens in milliseconds, pop, opens in shuts off. So to actually see, we can say time.sleep, maybe five seconds. So wait for five seconds before you shut off. We need to import time here. So import time. Time is just module in Python. It's already then Python.sleep can just import time and time to sleep. Means wait for five seconds before you do any action. If you first take any action, wait for five seconds. And let's run this again. You see, it's opened. Wait for five seconds then it's appeared. So to this point here, we are opening our Chrome engine. Chrome browser. But this will only work if you followed the pre-set up instructions. I said install your driver. After installing your driver, make sure you add it to your environmental variables for window users. For window users, environmental variables just go such environmental variables from their search bar in the task bar, tool bar or something. Search for environmental variables and you will see edit system environmental variables. Then in the system variables section, click path, go add your path to your Chrome driver. Add it there for Linux users, the driver added to your path. If you are using Basharra C or server, so just see that you added to your path. How to do that? You can go search Google, search GPD, download the Ito's out there. So I won't get into that. You can just go ask how to add into path forever and you will get your answers. So if you see this one turn, if you see this does not turn on your site, make sure you consider adding it to your path. Adding the driver to your path. So we have already opened the driver. We have already opened it. We have opened the browser. Now after opening the browser, what do we actually want to do? We want to say, OK, open the browser. But then go to specific URL in that browser. This driver holds the complete interaction to the Chrome browser. To this point, driver variable holds any interaction that you want to do to the Chrome browser is held inside this driver. So we can do something like driver.get and it receives the URL and we can put something like that. You see? So what does this mean? This means, hey, open the browser. Which browser? Chrome. After opening the Chrome browser, go straight to this URL. OK, after going to that URL, we can just say time to sleep. So let's run this. It will open.

What's going on?

OK, what's happening? This site can be reached. OK, I think my network was down. So it opened, then it went straight to this URL. So here you can see it's taking time because my network is down. But you see it went straight to that URL. Python. I had to Python for you. Actually, for this, it's for YouTube channel. It's well-setting. I tried some time. So it's loading. I think my network is down. But on your site, it might have already opened. It should open YouTube to this specific path, to this specific channel. OK, here it is. Here, see? Voila. So it opened. But as you may have noticed, you might be sign-dining your browser. But here, when you run this, it runs in a completely common. It runs without your Chrome profile. Without your being signed in. But you can add that. You can make sure that it opens with your signed in. But sometimes it's dangerous because you can destroy your data. We can see that in some other tutorials next time. So now we have seen that we opened the browser. And we get the URL for the specific channel. So next up.

